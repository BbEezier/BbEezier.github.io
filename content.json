{"meta":{"title":"yLTT的Blog","subtitle":null,"description":"Excelsior!","author":"yLTT","url":"http://liangzt.top","root":"/"},"pages":[{"title":"about","text":"[UDD from 2050] 与&nbsp; yLTT&nbsp; （ ） 对话中... bot_ui_ini()","path":"about/index.html","date":"12-12","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"07-28","excerpt":""},{"title":"归档","text":"","path":"categories/index.html","date":"07-28","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"12-12","excerpt":""},{"title":"bangumis","text":"","path":"bangumis/index.html","date":"11-17","excerpt":""},{"title":"","text":"verify_4dda16566618a41dd827368e68ea51be","path":"verification/verification.html","date":"11-15","excerpt":""},{"title":"留言板","text":".twopeople{ margin: 0; align-items: center; justify-content: center; text-align: center; } canvas { display: block; margin: 0 auto; cursor: move; } 想说点啥呢 让我看两本书先...","path":"comment/index.html","date":"11-17","excerpt":""}],"posts":[{"title":"","text":"简单配置使用天猫精灵控制你的ESP8266 简单配置使用天猫精灵控制你的ESP8266! 好久不见，我是yLTT。好不容易进入高中阶段的最后一年，马上就能迎接新的生活了吧！ console.error(\"Error: [hexo-tag-aplayer] Specified asset file not found (嘉山未紗)\"); 文章共分成4大块构成 阿里生活物联网平台配置 硬件准备 ESP8266代码 Arduino代码 阿里生活物联网平台配置 打开 天猫精灵开放平台 找到 生活物联网平台 选择 直连接入 进入到阿里云生活物联网平台中的 项目管理 界面，我们新建一个项目，名字按自己需求自定义，其余选项保持默认 在产品管理界面中，我们新建一个产品。所属品类最好按你实际功能选择，因为如果瞎选的话，有一些用电器在天猫精灵里面是没有对应的操控方式的，天猫精灵适配的用电器可以在等下进入产品设置界面看到（大不了重新新建一个产品） 这里的连网方式我们要选为蜂窝网，因为如果选择wifi方式会要求你的芯片自行组网，如果你有这个需求可以在网上查询相关教程进行设置。一般个人用户做着玩的项目选蜂窝就足够了。 来到 功能定义 界面，在这里你可以使用 标准功能 或者自己自定义一个功能进行数据的交换，我嫌麻烦这部分就按默认的来了，大家按需选择 下一步我们来到人机交互界面，先把右上角的使用 公版App控制产品 勾选好，然后转到天猫精灵选项勾选开启，此时你也能看见 天猫精灵 支持控制的品类了，如果你的产品不在产品类别中那么请重新新建一个产品。 其余的选项，大家自行设置完后记得要保存一下，要不然他会用 ! 来警示你，强迫症看着还是很不爽的 转到 设备调试 界面，我们随便选一个芯片 然后我们 新增测试设备 ,DeviceName你自己自定义，新建过后他会有三个数据（ProductKey、DeviceName、DeviceSecret）给你，最好拿txt文件保存一下方便等一下操作 至此，生活物联网平台 的设置暂时告一段落 硬件准备 首先，你得先有一个天猫精灵是吧~ 这是我的nodemcu开发板 这是我的Arduino UNO和一个测试用的RGB模块 简单的接线图 ESP8266代码 首先要确保你的Arduino IDE有 AliyunIoTSDK 这个库，按照他的说明把依赖项安装好。 感谢芋头大佬，让ESP8266连上阿里云变得更加方便迅速 ESP8266离线包 // 引入 wifi 模块，并实例化，不同的芯片这里的依赖可能不同 #include &lt;ESP8266WiFi.h&gt; static WiFiClient espClient; // 引入阿里云 IoT SDK #include &lt;AliyunIoTSDK.h&gt; // 设置产品和设备的信息，从阿里云设备信息里查看 #define PRODUCT_KEY &quot;a1aOFU668aC&quot; //产品ID #define DEVICE_NAME &quot;FKRGB&quot; //设备名 #define DEVICE_SECRET &quot;************&quot; //设备key #define REGION_ID &quot;cn-shanghai&quot; // 设置 wifi 信息 #define WIFI_SSID &quot;ESP8266&quot; #define WIFI_PASSWD &quot;IOT666666&quot; void setup() &#123; Serial.begin(115200); // 初始化 wifi wifiInit(WIFI_SSID, WIFI_PASSWD); // 初始化 iot，需传入 wifi 的 client，和设备产品信息 AliyunIoTSDK::begin(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID); &#125; void loop() &#123; AliyunIoTSDK::loop(); &#125; // 初始化 wifi 连接 void wifiInit(const char *ssid, const char *passphrase) &#123; WiFi.mode(WIFI_STA); WiFi.begin(ssid, passphrase); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; Serial.println(&quot;Connected to AP&quot;); &#125; 请用刚才你保存好的3个数据，替换上面的定义，还有wifi的设置也请你自行替换 烧录过后，应该就能看到你的设备已经在线了 这时我们先暂时回到 生活物联网平台 中的 批量投产 页面 点开配网 + App下载二维码 把你的Device Name填好生成二维码 确定好你的Esp8266已经连接好阿里云后，在手机上搜索应用商店下载 云智能 APP 点开右上角的扫码功能，扫这个二维码 这是我配网成功的界面，我们现在打开Arduino IDE的串口功能，查看我们在App下达的指令 ESP8266 能否收到 欧耶！成功了！ 这时我们可以对代码进行进一步的修改 // 引入 wifi 模块，并实例化，不同的芯片这里的依赖可能不同 #include &lt;ESP8266WiFi.h&gt; static WiFiClient espClient; // 引入阿里云 IoT SDK #include &lt;AliyunIoTSDK.h&gt; #include&lt;SoftwareSerial.h&gt; SoftwareSerial mySerial(4,5); //D2，D1脚分别为rx，tx // 设置产品和设备的信息，从阿里云设备信息里查看 #define PRODUCT_KEY &quot;a1aOFU668aC&quot; //产品ID #define DEVICE_NAME &quot;FKRGB&quot; //设备名 #define DEVICE_SECRET &quot;***************&quot; //设备key #define REGION_ID &quot;cn-shanghai&quot; // 设置 wifi 信息 #define WIFI_SSID &quot;ESP8266&quot; #define WIFI_PASSWD &quot;IOT666666&quot; int Red,Blue,Green; String RGBvalue; void setup() &#123; // set the digital pin as output: mySerial.begin(9600); Serial.begin(115200); // 初始化 wifi wifiInit(WIFI_SSID, WIFI_PASSWD); // 初始化 iot，需传入 wifi 的 client，和设备产品信息 AliyunIoTSDK::begin(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID); // 绑定一个设备属性回调，当远程修改此属性，会触发 SetRGBColorCallback // RGBColor 是在设备产品中定义的功能标识符 AliyunIoTSDK::bindData(&quot;RGBColor&quot;,SetRGBColorCallback); &#125; void loop() &#123; AliyunIoTSDK::loop(); &#125; // 初始化 wifi 连接 void wifiInit(const char *ssid, const char *passphrase) &#123; WiFi.mode(WIFI_STA); WiFi.begin(ssid, passphrase); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; Serial.println(&quot;Connected to AP&quot;); &#125; // RGBColor状态修改的回调函数 void SetRGBColorCallback(JsonVariant p) &#123; Red = p[&quot;RGBColor&quot;][&quot;Red&quot;]; Green = p[&quot;RGBColor&quot;][&quot;Green&quot;]; Blue = p[&quot;RGBColor&quot;][&quot;Blue&quot;]; RGBvalue += Red; RGBvalue += &#39;,&#39;; RGBvalue += Green; RGBvalue += &#39;,&#39;; RGBvalue += Blue; mySerial.print(RGBvalue); Serial.print(RGBvalue); RGBvalue = &quot;&quot;; &#125; 看注释就知道函数大概的用途，如果对上面函数有不了解的建议去看 AliyunIotSdk 的技术文档 然后我们回到 云智能App 来到这个页面点开 更多服务 找到天猫精灵，绑定你自己天猫精灵的账号 绑定成功后，打开天猫精灵看看 欧耶！连接上天猫精灵啦！ 用天猫精灵控制esp8266就很简单了，我们直接呢，在场景这个选项当中，新建一个自定义智能场景即可 然后你只需要对天猫精灵喊命令，就会按你的设置执行功能了 Arduino代码 #include&lt;SoftwareSerial.h&gt; SoftwareSerial mySerial(2,3); //2，3脚分别为rx，tx #define Rpin 9 #define Gpin 10 #define Bpin 11 String ReadData; int RGBvalue[]=&#123;0,0,0&#125;; int tod; int i = 0; void setup() &#123; Serial.begin(115200); mySerial.begin(9600); pinMode(Rpin,OUTPUT); pinMode(Gpin,OUTPUT); pinMode(Bpin,OUTPUT); &#125; void loop() &#123; SerialListen(); goRGBwithArray(RGBvalue); i = 0; ReadData = &quot;&quot;; &#125; void SerialListen()&#123; while(mySerial.available()) &#123; ReadData += char(mySerial.read()); delay(2); &#125; Serial.print(ReadData); do&#123; tod = ReadData.indexOf(&#39;,&#39;);//找到字符串中逗号出现的位置 if(tod != -1) &#123; String str;//我们先创建一个String str = ReadData.substring(0,tod);//用来保存逗号前面的数据 RGBvalue[i] = str.toInt();//将上面的保存好的String数据转换成Int类型保存到RGBvalue中 ReadData = ReadData.substring(tod + 1,ReadData.length()); i++;//进入下一次循环 // Serial.println(message); &#125; else&#123; if(ReadData.length()&gt;0)&#123; RGBvalue[2] = ReadData.toInt(); &#125; &#125; &#125;while(tod&gt;=0); &#125; void goRGB(int Rval,int Gval,int Bval)&#123; analogWrite(Rpin,Rval); analogWrite(Gpin,Gval);//因为我手头这个RGB灯带是共阴的，所以不需要用255去减，如果是共阴的RGB灯带要用255减去这个值 analogWrite(Bpin,Bval); &#125; void goRGBwithArray(int RGBval[])&#123; analogWrite(Rpin,RGBval[0]); analogWrite(Gpin,RGBval[1]); analogWrite(Bpin,RGBval[2]); &#125; void bln(int pin,int val)&#123; //简单呼吸灯函数 for(int i=0;i&lt;val ; i++)&#123; analogWrite(pin,i); delay(2); &#125; delay(1000); for(int i=255;i&gt;0 ; i--)&#123; analogWrite(pin,i); delay(2); &#125; &#125; 这里的代码可以不用照抄，大家可以按自己需求写自己的下位机代码，我这里主要是提供一个思路 总结 比较容易上手的实用小项目，适合喜欢动手的小伙伴来体验物联网这一概念！ 最后,Excelsior!","path":"2021/12/21/简单配置使用天猫精灵控制你的ESP8266/","date":"12-21","excerpt":"","tags":[]},{"title":"","text":"Hexo + Coding/Github静态博客部署教程 2021版 Hexo + Coding/Github 静态博客部署教程 本篇文章内容由本人实践后亲测有效，遇到奇奇怪怪的BUG建议熟练使用百度等搜索引擎，如若无果在尝试联系本人=v= console.error(\"Error: [hexo-tag-aplayer] Specified asset file not found (&quot;","path":"2021/12/21/Hexo-Coding-Github静态博客部署教程-2021版/","date":"12-21","excerpt":"","tags":[]},{"title":"","text":"关于Gal主题的一些使用心得 console.error(\"Error: [hexo-tag-aplayer] Specified asset file not found (href=http://music.163.com/song/media/outer/url?id=408772686.mp3)\"); PS：开始前不来点音乐吗XD 针对Hexo Theme Gal 在git以下内容时报错的解决方案 &nbsp; npm install hexo-renderer-sass --save npm install hexo-renderer-scss --save &nbsp; &nbsp; 1.下载Yarn 2 - 安装 | Yarn - JavaScript 软件包管理器 | Yarn 中文文档 - Yarn 中文网 (yarnpkg.cn) 按照文档描述下载安装好后可以重新安装 yarn add hexo-renderer-sass yarn add hexo-renderer-scss &nbsp; 2.改用淘宝镜像 cnpm下载 npm install -g cnpm --registry=https://registry.npm.taobao.org npm config set registry https://registry.npm.taobao.org cnpm install hexo-renderer-sass --save 如果在git拉取时报错OpenSSL SSL_read: Connection was reset, errno 10054 将ssl验证关闭即可，然后重新拉取 git config --global http.sslVerify \"false Gal 主题色更改方式 在你的Hexo博客根目录下\\themes\\gal\\source\\css中找到_variables.scss文件 颜色对应关系的话其实直接对比页面与scss文件里面RGB代码就能看出来，建议开着F12对照。 &nbsp; 代码高亮设置 Gal主题里面引用了highlight.js 最简单的应用方式就好像我上面的示例 直接按如下格式输入即可 代码内容 如下 import random yLTT = &quot;BEzier&quot; print(yLTT) random_num = random.randint(1,1000) for i in range(3): num = int(input(&#39;请输入你猜的数字：&#39;)) if num&gt;random_num: print(&#39;你猜的太大了&#39;) elif num&lt;random_num: print(&#39;太小了&#39;) else: print(&#39;恭喜你猜对了，答案是：&#39;,random_num) break &nbsp; 我个人觉得Md文件编辑用 Typora 会方便一点，代码块高亮可以直接导入不用按格式输入 &nbsp; 加载图片避坑 这里可以直接照着这位大佬的方法走就可以了: HEXO插入图片（详细版） - 简书 (jianshu.com) 一般的，按照上面的流程走完后可以直接通过 ![图片名](图片.jpg) 在文章中进行一个图片的展示 这里的文章就是指你_post文件夹下的文件，也就是你在git中通过 hexo new xxx 新建的文件，但如果你拿这个方法在页面中使用，就没效果了 hexo new page xxx 新建页面 如果你想要在页面（比如“关于我” about页面）中添加图片，直接使用Html的语法就可以了~(当然文章也可以使用这个方法) &lt;img src=\"/image/xxx.png\" /&gt; 这里我是直接在我的Hexo根目录的\\source文件夹下面新建了一个image文件夹,然后把需要展示的图片放进去，调用起来也很方便。 自己的碎碎念 开博客是为了更好的记录自己学习的历程，目前网站是直接托管给Github page服务的，或许未来有钱了架设一个服务器也是不错的选择~(º﹃º ) 话说原来暑假已经过去一个月了吗？？？！ &nbsp; &nbsp; &nbsp; &nbsp;","path":"2021/12/20/关于Gal主题的一些使用心得-0/","date":"12-20","excerpt":"","tags":[]},{"title":"Alexa 快速接入 Esp8266 SinricPro","text":"Alexa 快速接入Esp8266使用SinricPro框架 var ap = new APlayer({ element: document.getElementById(\"aplayer-OfMaJerT\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"シャボン\", author: \"蜂屋ななし/ 初音ミク\", url: \"http://music.163.com/song/media/outer/url?id=1418072955.mp3\", pic: \"https://p1.music.126.net/nfovuRvPbVq79eiLcJiiIg==/109951164642854606.jpg\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 最近终于有点空闲时间了，从家里翻出来一个19年闲鱼二手捡回来的Amazon Alexa Echo Dot 智能音响，打算好好研究一下用途。不过这玩意真实离谱，我当初买的时候才50块出头，现在二手竟然还反涨到70~80块了，魔幻啊，虽然它白色款确实挺好看的，但我还是选择天猫精灵刻晴限定版 这一期就简单的演示用Alexa控制Esp8266的小例程，就不展开细说了（毕竟天猫精灵他不香吗） 简单配置下Alexa前期准备步骤，就是让Alexa连上网可以参照这个教程 (32 封私信 / 80 条消息) amazon alexa echo dot设置？ - 知乎 (zhihu.com) 因为我比较嫌麻烦，网络上有现成的能用则用。值得注意的是最好使用火狐或者苹果的Safari浏览器(网页端的)来配置，不知道为啥我用Edge配置不了，麻木了。还有Alexa app 安卓版的不知道为啥打开app后会报错闪退，我很苦恼，换了梯子也上不去，没办法只好用美区的App store 下载了Alexa 的ios软件，这次倒是没出什么问题。 配置完成后，我们要给Alexa添加Skill。打开到Alexa的软件，找到 Skills &amp; Games 选项进入 搜索 Sinric Pro 就只有一个按钮，点吧，反正你也点不了其他地方啊 添加Skill的时候他会弹出页面让你绑定Sinric Pro账号，我忘记讲了，还要注册一个账号来着，尴尬 Sinric Pro 官方入门文档 这个文档是全英文的，我建议你手动开一下网页翻译啊，这样会舒服很多，跟着它的步骤注册个账号就好了。 注册完成后，到Sinric Pro官网里的控制台页面，进入 Devices 新建一个设备，这里的设置流程官方入门文档讲的很透彻了，我比较懒，你们自己看看好不好 不过要注意的一点是他最后注册完设备生成的三元组，你好像是无法重复获取的，也就是说如果你忘记了，要重新进入它的 Edit 选项设置一次才能重新生成一个给你，我的建议是直接找个TXT文档保存好，比较贵重。 接下来我们在弄一下硬件就好了 可以去 Github 拿 Sinric Pro 官方的SDK，里面有esp8266和esp32的Arduino IDE例程，当然别忘了在Arduino IDE里面的库管理器里面安装 SinricPro 库文件 下载好官方的SDK，直接找到例程里面的Switch例程双击打开 #define Rpin 4 #define Gpin 5 #define Bpin 16 #ifdef ENABLE_DEBUG #define DEBUG_ESP_PORT Serial #define NODEBUG_WEBSOCKETS #define NDEBUG #endif #include &lt;Arduino.h&gt; #ifdef ESP8266 #include &lt;ESP8266WiFi.h&gt; #endif #ifdef ESP32 #include &lt;WiFi.h&gt; #endif #include &quot;SinricPro.h&quot; #include &quot;SinricProSwitch.h&quot; #define WIFI_SSID &quot;IOT_FIRE&quot; #define WIFI_PASS &quot;IOT666666&quot; #define APP_KEY &quot;xxxxxxxxxxxxxx&quot; #define APP_SECRET &quot;xxxxxxx&quot; #define SWITCH_ID &quot;xxxxxxxxxxx&quot; #define BAUD_RATE 9600 bool myPowerState = false; unsigned long lastBtnPress = 0; bool onPowerState(const String &amp;deviceId, bool &amp;state) &#123; Serial.printf(&quot;Device %s turned %s (via SinricPro) \\r\\n&quot;, deviceId.c_str(), state?&quot;on&quot;:&quot;off&quot;); myPowerState = state; digitalWrite(Rpin, myPowerState?HIGH:LOW); return true; // request handled properly &#125; // setup function for WiFi connection void setupWiFi() &#123; Serial.printf(&quot;\\r\\n[Wifi]: Connecting&quot;); WiFi.begin(WIFI_SSID, WIFI_PASS); while (WiFi.status() != WL_CONNECTED) &#123; Serial.printf(&quot;.&quot;); delay(250); &#125; Serial.printf(&quot;connected!\\r\\n[WiFi]: IP-Address is %s\\r\\n&quot;, WiFi.localIP().toString().c_str()); &#125; // setup function for SinricPro void setupSinricPro() &#123; // add device to SinricPro SinricProSwitch&amp; mySwitch = SinricPro[SWITCH_ID]; // set callback function to device mySwitch.onPowerState(onPowerState); // setup SinricPro SinricPro.onConnected([]()&#123; Serial.printf(&quot;Connected to SinricPro\\r\\n&quot;); &#125;); SinricPro.onDisconnected([]()&#123; Serial.printf(&quot;Disconnected from SinricPro\\r\\n&quot;); &#125;); //SinricPro.restoreDeviceStates(true); // Uncomment to restore the last known state from the server. SinricPro.begin(APP_KEY, APP_SECRET); &#125; // main setup function void setup() &#123; pinMode(Rpin, OUTPUT); pinMode(Gpin, OUTPUT); pinMode(Bpin, OUTPUT); Serial.begin(BAUD_RATE); Serial.printf(&quot;\\r\\n\\r\\n&quot;); setupWiFi(); setupSinricPro(); &#125; void loop() &#123; handleButtonPress(); SinricPro.handle(); &#125; 把三元组和自己的Wifi信息填进去，烧录一下，等待你的Esp8266连接到Sinric Pro服务。 如果连接成功了，那么你手机Alexa app会跳提示的，你的Esp8266直接就在Alexa app的 devices里面出现了。 芜湖！连接成功啦 我们可以给这个设备自定义语句，就像天猫精灵一样。我们直接点击你的设备，进入到控制页面，再点击”Create a Routine“来新建一个自定义语句 直接右上角点击一下+号就好了 设置一下”When this happens“就是唤醒语，在 “Add action“添加一个动作就好啦。后面的一些简单设置我就不细说了，毕竟这些英文都挺好看懂的，实在不会你可以翻译啊是吧。 最后我演示一下这个功能，还是不错的，我把唤醒词设成了桐姥爷的” Link Start! ‘’ 但是不知道为啥，有可能我是丈育吧，它识别不了我说的，只能添加了几个相似音的增加一下容错率。 不得不说，啊，这个Alexa英文的识别率还是吊锤天猫精灵的，听起来还是挺高大上的，平常用来练练口语是挺不错，不过就是这个连接网络的服务太Shit了，基本无解！毕竟是外网，我们自个玩玩没啥问题，如果真的要用在家里的话，为什么不直接上天猫精灵啊，我不能接受。 总结其实没什么好说的，这玩意外观设计确实挺好看，还很小巧，就是音质拉了大胯，不过也不能怨它，毕竟也不是专业的音响。真有钱直接搞HomePod mini啊，这不是秒杀，干。不过呢他这个光环真的好看，建议国内友商抄一下啊，这不比整一个方块好是吧。 最后,Alexa,Link Start!","path":"2021/12/09/Alexa-快速接入-Esp8266-SinricPro/","date":"12-09","excerpt":"","tags":[{"name":"物联网","slug":"物联网","permalink":"http://liangzt.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"},{"name":"洋货","slug":"洋货","permalink":"http://liangzt.top/tags/%E6%B4%8B%E8%B4%A7/"}]},{"title":"Python+Mongodb+Esp8266+小程序的简易温湿度数据展示","text":"Python Mongodb Esp8266 小程序 TCP简易项目 var ap = new APlayer({ element: document.getElementById(\"aplayer-PNZiJrXM\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"月蝶華想\", author: \"東方妖々夢 ～ Ancient Temple\", url: \"http://music.163.com/song/media/outer/url?id=785030.mp3\", pic: \"https://p1.music.126.net/Ga6wORrmSXdEc3WMMfWjzQ==/18994063370115108.jpg?\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 好久不见，今天继续来分享有意思的小项目！ 在观看本教程前，您最好具备的知识和必备的软硬件： Python JavaScript Arduino IDE TCP通讯基础 微信开发者工具 MongoDB ngrok Esp8266开发板 温湿度传感器(我使用的是DHT11) 没关系，如果有不会的知识，现学现用就好。学以致用是我认为学习知识最快速，最方便的途径，有了确切的目标，在学习时会有方向性，不容易学着学着学飞了。 这次的项目所要求的掌握的知识较多，我这里就分享一下我在实现这个项目时大概的走向，所以代码或配置有些许细节遗漏还请多多谅解，可以到网络上寻求相关教程进行补全。 MongoDB数据库下载首先找到MongoDB的官网下载，切记选择社区版，文件格式我们改为zip格式下载 好，下载完之后请自行去百度搜索相关的资料，MongoDB中文网网上也能找到,主要是这一块配置的细节我忘记了，就不教学了:p 值得一提的是，这里呢还需要下载MongoDB Shell，同样是在官网可以下载到 Python Tcp Server的配置需要用到的模块: sys threading json socket pymongo 模块的安装网上都有教程，我使用的是Pycharm作为IDE进行编程，同时我们需要使用MongoDB Shell进行辅助，这个是Shell命令的介绍，有不懂的可以自行查询。 先连接mongodb数据库，默认命令是 mongodb://localhost/ 我们照着输入回车即可，这是成功后的画面 然后我们要在Shell 新建一个自己用的数据库，使用指令 “use”来创建数据库，如果该数据库不存在，则会创建一个新的数据库，如果该数据库已经存在，则将切换到该数据库 use database_name 数据库的名字自己可以自定义，这是我创建好了的数据库，可以使用命令 show dbs 来查询所有的数据库 我们在自己新建好的数据库下面新建一个集合，命令是 db.createCollection(&quot;mycollection&quot;) 这里同样也可以使用 show collections 查询数据库所有的集合，我新建了一个名为“gamelib”的集合 好，那么接下来我们就要在Python中操作MongoDB数据库，并且还要创建一个TCP服务器，用于与传感器交换数据。这是Pymongo的使用说明，可以查阅相关方法 在Pycharm中新建一个py文件，随便写一些代码测试Python与MongoDB是否正常运行 import pymongo #mongodb 操作# client = pymongo.MongoClient(&quot;localhost&quot;, 27017)#mongodb的数据库默认是在本地 27017端口 db = client.mydb#选择数据库 collection = db.gamelib#选择集合 student = &#123; &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39; &#125;#新建一个字典对象 collection.insert_one(student)#添加这个对象到集合里 for show_value in collection.find():#遍历集合中的所有数据 print(show_value) 运行后的结果，可以看到返回元素中已经添加了student这个对象(另外两个是之前做好的，请无视) 那么我们在运行一次会怎么样呢？ 哦，我的老天，竟然出现了两个完全一样的数据！但是细细一看，又发现还是有不同的地方，就是前面的”ObjectId”属性中的值是不同的，这是因为我们使用了Pymongo的insert_one()方法添加了一个值为 “student”的元素，所以每一次运行，都会添加一个新的元素进去。对应的更新方法 update_one()和delete_one()方法就不在演示，请自行查阅资料。 同样，我们去Shell里面也能find到相同的数据 为了统一数据的标识，我们新建一个自己的数据格式，方便之后Esp8266连接服务器的时候发送json数据可以直接拿来update &#123; Name: &#39;HumiTure_Sensor_No1&#39;, Value: &#123; temp: 22.6, humi: 52 &#125; &#125; value里面的值就是后面Esp8266收集并上传到服务器的，这里先放一个模板 这样我们就可以开始写函数了，首先更新函数的逻辑，我采用的是update_one这个函数 old_data = collection.find_one(&#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;&#125;) new_data = &#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;, &quot;Value&quot;: value&#125; set_data = &#123;&quot;$set&quot;: new_data&#125; collection.update_one(old_data, set_data) 首先我们要将要更新的数据和更新后的数据准备好，值得注意的是要将更新后的数据放置在’’$set”操作符后,然后再将他们传入update_one()函数之中 TCP socket通讯，我相信大部分人都有了解过，这里我们带过他的底层理论，直接使用python进行一个操作的演示即可 ipaddress = (&quot;&quot;, 8080) tcp_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) tcp_server.bind(ipaddress) tcp_server.listen(128) conn, addr = tcp_server.accept() request = conn.recv(128) print(&#39;request is:&#39;, request.decode(&#39;UTF-8&#39;)) print(&#39;Connected by:&#39;, addr) reply = &#39;OKKK&#39; conn.sendall(reply.encode(&#39;UTF-8&#39;)) conn.close() 我们逐行进行讲解，因为直接打在注释里面我感觉会显得我很敷衍啊有木有。来看第一行，这里没啥好说的将本地的8080端口设为我们的ip。第二行就比较重量级，这里我们通过socket.socket()创建一个socket对象 “tcp_server” 并使用 IPv4(AF_INET, IP version 4)和TCP通讯协议 (SOCK_STREAM) 第三行也很直观，我们将这个socket对象设置我们的ip地址上(也就是本地的8080端口) 第四行就是开始TCP监听，里面的参数是完成backlog的长度，这边设置没什么特别需求学我设置128就好了。第五行又是重量级，socket.accept()开始被动的等待TCP客户端的连接，因为是阻塞式的所以如果没有客服端连接它会一直卡在这一行，如果一但有接到TCP客户端的连接，该方法将会返回一个新的socket连接以及接入连接客户端的ip地址。 第六行就好理解了，socket.recv()方法会返回客户端发送的信息，里面的参数就是buffersize，一般的来说也设个128就差不多，看你自己实际情况去修改就好了。 第七行就是将客户端发送过来的消息转码后显示到Console上，因为返回的数据是字节类型的。 第八行，显示客户端的ip地址。 第九行，socket.sendall()方法，本地服务器给客户端发送消息，切记里面的参数要字节类型，这里我们转码一下即可。 第十行，关闭和客户端的连接。 好，那我们现在开整 import sys import json import socket import threading import pymongo #mongodb 操作# client = pymongo.MongoClient(&quot;localhost&quot;, 27017) db = client.mydb collection = db.gamelib # 指定服务器IP地址 # ipaddress = (&quot;&quot;, 8080) class MyServerSocket: def __init__(self, ipadd, time): self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.server_socket.bind(ipadd) self.server_socket.listen(time) # 128 # def change_humiture_data(self, value):#将客户端的Json数据解码成合适的类型，然后再交给数据库，这里是数据更新给MongoDB的部分呢 old_data = collection.find_one(&#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;&#125;) new_data = &#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;, &quot;Value&quot;: value&#125; set_data = &#123;&quot;$set&quot;: new_data&#125; collection.update_one(old_data, set_data) print(collection.find_one(&#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;&#125;)) def get_set_value(self, data): #将客户端的Json数据解码成合适的类型，然后再交给数据库，这里是解码的部分呢 json_str = data.decode(&quot;UTF-8&quot;) set_json = json.loads(json_str) self.change_humiture_data(set_json) print(type(collection.find_one(&#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;&#125;))) def run(self): while True: client_socket, client_addr = self.server_socket.accept() # 等待客户端连接 print(&quot;&#123;&#125; online&quot;.format(client_addr)) tr = threading.Thread(target=self.up_data_new, args=(client_socket, client_addr)) # 创建线程为客户端服务 tr.start() # 开启线程 self.server_socket.close() def up_data_new(self, client_socket, client_addr): while True: recv_data = client_socket.recv(24)#处理得到的数据 really_data = recv_data.decode(&#39;UTF-8&#39;) if recv_data: #smg.get_set_value(recv_data) #really_data = recv_data if really_data ==&#39;wxOnline&#39;:#判断是否为小程序，如果是则发送数据 data2Wx = collection.find_one(&#123;&quot;Name&quot;: &quot;HumiTure_Sensor_No1&quot;&#125;)[&#39;Value&#39;] send_data=json.dumps(data2Wx) print(data2Wx) client_socket.sendall(send_data.encode(&#39;UTF-8&#39;)) else :#如果不是小程序，就将读取回来的数据进行更新 try: smg.get_set_value(recv_data) except Exception as e: print(e) else: # 客户端断开连接 print(&quot;&#123;&#125; offline&quot;.format(client_addr)) break client_socket.close() smg = MyServerSocket(ipaddress, 128) if __name__ == &quot;__main__&quot;: try: smg.run() except KeyboardInterrupt: print(&quot;end&quot;) sys.exit(0) 整完了。因为这个Tcp连接呢，一次只能跟一个客户端对接，啊，搞得我很麻木，只好用多线程的方式来实现一对多，只要检测到一个客户端连接就新开一个线程。 由于我们这个只是一个小项目，不用考虑大量连接时候的需求，后期我会研究一下nodejs来实现，应该会比用Python方便很多。 这里我仅提供一个例子，大家可以照着我的代码按照自己的需求去改。（什么，你问我看不懂怎么办，我顶！阿Sir，百度谷歌搜狗必应老师不是都在这吗，你去问他们啊！当然你也可以加我微信问我。付费提问哈） Python服务器通过Ngrok映射到外网噔噔蹬蹬！ 终于到将本地服务器，映射到互联网中这一步了，只要完成这一步就意味着你的传感器即使隔着你的本地服务器十万八千里，只要传感器连接着互联网，就能将数据送达到服务器上 我们先要下载Ngrok软件，配置的相关内容我也不说，大家都给我去百度吧哈哈 下完ngrok，直接打开它，会弹出一个Console，我们按照它上面的提示输入 ngrok tcp 8080后回车 tcp协议 本地端口号8080，这些都挺熟就不解释了 成功后的界面，对我们来说有用的消息就是 tcp://0.tcp.ngrok.io:17449 -&gt; localhost:8080 告诉我们”0.tcp.ngrok.io:17449”这个网址现在映射到了本地端口8080上，得到Python服务器的外网ip后面就好办了。 值得一提的是这个网址和端口号你每一次重启Ngrok都会变的，所以也只能用作小型的项目展示用了，一旦你重启了Ngrok，要重新设置一边全部的ip和端口。 烦死了，要不是我没钱，直接整一个稳定的域名用来传输服务器的数据哈哈，谁有钱就资助我吧 硬件配置Esp8266与DHT11初次见面就直呼 简陋啊 简单接线完后，直接进入ArduinoIDE进行一个代码的写 #include &lt;Arduino.h&gt; #include &lt;ArduinoJson.h&gt; #include &quot;PubSubClient.h&quot; #include &lt;ESP8266WiFi.h&gt; #include &quot;DHT.h&quot; #define WIFI_SSID &quot;IOT_FIRE&quot; //wifi名 #define WIFI_PASSWD &quot;IOT666666&quot; //wifi密码 #define DHTPIN D2 DHT dht(DHTPIN, DHT11); const uint16_t port = 15877; //Tcp 服务器的端口 const char * host = &quot;6.tcp.ngrok.io&quot;; //Tcp 服务器的ip地址 WiFiClient espClient; //创建网络连接客户端 DynamicJsonDocument dht_data(2048);//开辟一片内存给json数据 //连接WIFI相关函数 void setupWifi() &#123; WiFi.mode(WIFI_STA); WiFi.begin(WIFI_SSID, WIFI_PASSWD); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; dht.begin(); Serial.println(&quot;Connected to AP&quot;); Serial.println(&quot;IP address: &quot;); Serial.println(WiFi.localIP()); &#125; void setup() &#123; Serial.begin(115200); setupWifi(); &#125; void loop() &#123; String json_data; float humi = dht.readHumidity();//读取DHT的数据 float temp = dht.readTemperature(); dht_data[&quot;temp&quot;] = temp;//将DHT的数据存在Json中 dht_data[&quot;humi&quot;] = humi; serializeJson(dht_data, json_data);//json序列化 Serial.println(&quot;Connecting to TCP Server :&quot;); Serial.println(host); if (!espClient.connect(host, port)) &#123; Serial.println(&quot;Failed&quot;); Serial.println(&quot;Reconnect in 5 seconds&quot;); delay(5000); return; &#125; // 发送数据到 Tcp Server espClient.print(json_data); //读取从 Tcp Server 返回的数据（以回车符结尾） String line = espClient.readStringUntil(&#39;\\n&#39;); Serial.println(line); delay(1000); &#125; 这一段的代码写的比较简单，该注释的地方我也打上了，一个很简单的逻辑，直接将读回来的数据发送给Tcp Server。 由于这一段代码是我第二天写的，这个时候我的电脑已经重启过了，所以Ngrok的ip改变了 进行第一次通讯测试 打开服务器后，可以在Console中看到Esp8266连接成功，并且更新数据的信息。 这里我搞了点骚操作，让服务器没有收到数据就主动断开与客户端的连接，这样可以保证客户端连接一次，发送一次消息后直接断开，防止多个客户端相互堵塞。(什么？你说这样效率低？哈哈，自己改代码咯~反正我只是给个例子) 不管怎么说，第一次服务器与客户端通讯测试算是成功了，我们看看Shell里面的数据有没有同步 ok，看来没问题了，接下来就进入到应用层的使用了！ 微信小程序的开发这一步，直接就有腾讯官方文档指导，前期步骤大家可以直接看下面的 小程序设计指南 小程序开发教程 小程序框架 小程序组件 小程序 API 小程序开发者工具 哦吼，不会用是吧，不要着急，一开始我也不会用，跟着官方操作一下理清头绪就好了。 开始 | 微信开放文档 官方文档教程 等到你安装完软件，也注册好了账号，就可以开始后面的步骤 注意，我这里只提供连接Tcp服务器的方法，不会将整个工程的代码放出来（毕竟我自己写了好久还挺累的） 微信小程序Tcp Socket文档 靠，我找遍全网都没能找到小程序Tcp socket的相关教学，折磨啊，幸好这玩意用起来也不难。我这里给个小例子抛砖引玉，大家照着改改就好了。 const tcp = wx.createTCPSocket(); function arrayBufferToJSON(buffer) &#123; return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(buffer))) &#125; Page(&#123; /** \\* 页面的初始数据 */ data: &#123; text1: &#39;湿度&#39;, text2: &#39;温度&#39;, num1: &#39;60&#39;, num2: &#39;60&#39;, socketOpen :false, userInfo: &#123;&#125;, hasUserInfo: false, user_image:&quot;http://q1.qlogo.cn/g?b=qq&amp;nk=309002093&amp;s=640&quot;, canIUseGetUserProfile: false, humi_percentage: 75, temp_percentage: 75 &#125;, upDataNow:function(res)&#123; var res_json = arrayBufferToJSON(res.message); console.log(res_json); this.setData(&#123; num1:res_json[&#39;humi&#39;], num2:res_json[&#39;temp&#39;], humi_percentage:res_json[&#39;humi&#39;], temp_percentage:res_json[&#39;temp&#39;] &#125;); &#125;, onLoad: function (options) &#123; tcp.onMessage(this.upDataNow); tcp.onClose(this.try2Connect_again) &#125;, onConnect_reply: function()&#123; console.log(&#39;已连接,并且发了条消息&#39;); tcp.write(&#39;wxOnline&#39;); &#125;, try2Connect_again: function()&#123; tcp.connect(&#123;address: &#39;6.tcp.ngrok.io&#39;, port: 15877&#125;); tcp.onConnect(this.onConnect_reply); &#125;, onReady: function () &#123; tcp.connect(&#123;address: &#39;6.tcp.ngrok.io&#39;, port: 15877&#125;); tcp.onConnect(this.onConnect_reply); &#125;, &#125;) 我们直接提取核心代码，并且细细分析 function arrayBufferToJSON(buffer) &#123; return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(buffer))) &#125; 首先来看这个方法，将ArrayBuffer类型的数据转为Json数据。通过查阅官方文档可知道 socket.onMessage()这个方法返回的是ArrayBuffer的数据，所以我们这里使用js的String.fromCharCode()方法，因为数组无法传到这个方法内，我们只好使用apply来传递数据。 这里我套了个娃，直接把转好的字符串再次打包成Json数据，这样方便接下来的操作 const tcp = wx.createTCPSocket(); tcp.connect(&#123;address: &#39;6.tcp.ngrok.io&#39;, port: 15877&#125;); tcp.onConnect(this.onConnect_reply); console.log(&#39;已连接,并且发了条消息&#39;); tcp.write(&#39;wxOnline&#39;); tcp.onMessage(this.upDataNow); tcp.onClose(this.try2Connect_again) 这个是过程简化后的Tcp创建代码，可以看见我们先新建一个TcpSocket实例(‘tcp’)然后将它连接到我们ngrok映射出来的ip上 当客户端连接上后，将会触发回调函数onConnect_reply()，里面是在console中输出连接成功的消息同时小程序客户端给服务器发送一条为“wxOnline”的请求消息 之后等待服务器传递数据过来，收到数据后触发回调函数upDataNow,将读取到的Arraybuffer数据转为json数据后提取里面的温湿度数据更新到主页面上 最后是检测，当tcp socket连接断开后，重新连接并且发送请求消息 小程序连接服务器启动小程序服务！ 芜湖！连接成功！ 看看我自己的小程序页面 这里注意要手动打开调试，才能连接到网络，要不然只能看到静态页面~ 好，终于完成了 总结这个项目从立项到实现到发布教程总共是2个星期多3天，期间我是完全没有小程序的经验，所以这方面卡的我时间比较长，整体流程做下来还是比较通畅的，因为Python esp8266这一块我也玩的比较久了。 这个教程虽说是教程，但更多的是我自己的复盘，有很多细节我都没讲，这点真的挺惭愧的，我觉得我自己没能力讲的那么的细致，去网上看更细节的教程会更好。 这个项目还算是比较容易实现的了，因为很多代码我都写的比较基础，只能够用来做做个人产品玩玩，商业化肯定会出很多BUG，这方面我也在努力学习，希望有朝一日也能够开发出商业级的物联网系统教程。 那么2022年也快到了，这里预祝大家新的一年，新的起点。年年更上一层楼吧！ 最后,Excelsior!","path":"2021/11/30/Python-Mongodb-Esp8266-小程序的简易温湿度数据展示/","date":"11-30","excerpt":"","tags":[{"name":"物联网","slug":"物联网","permalink":"http://liangzt.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"}]},{"title":"本站主题已更换为Sakura","text":"抽空把主题更换成更多人使用，且自定义功能更全面的Sakura主题。 我是用 cungudafa 大佬已经魔改过的Sakura-Plus主题根据自己的要求二次魔改后的版本，具体的自定义调教方面网络上已经有很多大佬传授过了，我就不单独另开一个帖子进行教学。 这些是我自己魔改主题时参阅过的大佬教程，质量有保证 hojun 夏祈枫 cungudafa 回到我本身，这段时间还是很忙的。临近期末，生活和学业的双重压力比之前压的更紧了，只有回到家，来到电脑面前，敲敲代码，做做MAD才能适当的喘口气。做这个博客是因为兴趣，但更多的原因是想记录这几年自己的学习经历，既是为了给未来的自己创造机会，也是让将来回忆过去的时候能有更多的谈资。 关于这个博客，未来5年内我肯定能持续的运营下去，但是工作之后就不太清楚还能不能保持现在这种激情去更新，希望到时候“归来仍是少年”吧哈哈。我觉得能在互联网当中，创造出一片属于自己的天地，记录自己的生活、想法，在这片汪洋中留下属于自己的一滴海水，是一件非常有意义的事情。 总之，趁现在还年轻，再不去多做自己热爱的事情，可能就没有机会了喔。 最后，Excelsior!","path":"2021/11/17/本站主题已更换为Sakura/","date":"11-17","excerpt":"","tags":[{"name":"web","slug":"web","permalink":"http://liangzt.top/tags/web/"},{"name":"博客相关","slug":"博客相关","permalink":"http://liangzt.top/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}]},{"title":"简单配置使用天猫精灵控制你的ESP8266","text":"简单配置使用天猫精灵控制你的ESP8266!好久不见，我是yLTT。好不容易进入高中阶段的最后一年，马上就能迎接新的生活了吧！ var ap = new APlayer({ element: document.getElementById(\"aplayer-tmhxaZWJ\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"義勇忍侠花吹雪\", author: \"田澤茉純 / 嘉山未紗 / 新田ひより\", url: \"http://music.163.com/song/media/outer/url?id=1346608352.mp3\", pic: \"https://p1.music.126.net/ioELm7ZOPlUXYeKcnMjQQg==/109951163869439795.jpg?\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 文章共分成4大块构成 阿里生活物联网平台配置 硬件准备 ESP8266代码 Arduino代码 阿里生活物联网平台配置打开 天猫精灵开放平台 找到 生活物联网平台 选择 直连接入 进入到阿里云生活物联网平台中的 项目管理 界面，我们新建一个项目，名字按自己需求自定义，其余选项保持默认 在产品管理界面中，我们新建一个产品。所属品类最好按你实际功能选择，因为如果瞎选的话，有一些用电器在天猫精灵里面是没有对应的操控方式的，天猫精灵适配的用电器可以在等下进入产品设置界面看到（大不了重新新建一个产品） 这里的连网方式我们要选为蜂窝网，因为如果选择wifi方式会要求你的芯片自行组网，如果你有这个需求可以在网上查询相关教程进行设置。一般个人用户做着玩的项目选蜂窝就足够了。 来到 功能定义 界面，在这里你可以使用 标准功能 或者自己自定义一个功能进行数据的交换，我嫌麻烦这部分就按默认的来了，大家按需选择 下一步我们来到人机交互界面，先把右上角的使用 **公版App控制产品 **勾选好，然后转到天猫精灵选项勾选开启，此时你也能看见 天猫精灵 支持控制的品类了，如果你的产品不在产品类别中那么请重新新建一个产品。 其余的选项，大家自行设置完后记得要保存一下，要不然他会用 **! **来警示你，强迫症看着还是很不爽的 转到 设备调试 界面，我们随便选一个芯片 然后我们 新增测试设备 ,DeviceName你自己自定义，新建过后他会有三个数据（ProductKey、DeviceName、DeviceSecret）给你，最好拿txt文件保存一下方便等一下操作 至此，生活物联网平台 的设置暂时告一段落 硬件准备 首先，你得先有一个天猫精灵是吧~ 这是我的nodemcu开发板 这是我的Arduino UNO和一个测试用的RGB模块 简单的接线图 ESP8266代码首先要确保你的Arduino IDE有 AliyunIoTSDK 这个库，按照他的说明把依赖项安装好。 感谢芋头大佬，让ESP8266连上阿里云变得更加方便迅速 ESP8266离线包 // 引入 wifi 模块，并实例化，不同的芯片这里的依赖可能不同 #include &lt;ESP8266WiFi.h&gt; static WiFiClient espClient; // 引入阿里云 IoT SDK #include &lt;AliyunIoTSDK.h&gt; // 设置产品和设备的信息，从阿里云设备信息里查看 #define PRODUCT_KEY &quot;a1aOFU668aC&quot; //产品ID #define DEVICE_NAME &quot;FKRGB&quot; //设备名 #define DEVICE_SECRET &quot;************&quot; //设备key #define REGION_ID &quot;cn-shanghai&quot; // 设置 wifi 信息 #define WIFI_SSID &quot;ESP8266&quot; #define WIFI_PASSWD &quot;IOT666666&quot; void setup() &#123; Serial.begin(115200); // 初始化 wifi wifiInit(WIFI_SSID, WIFI_PASSWD); // 初始化 iot，需传入 wifi 的 client，和设备产品信息 AliyunIoTSDK::begin(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID); &#125; void loop() &#123; AliyunIoTSDK::loop(); &#125; // 初始化 wifi 连接 void wifiInit(const char *ssid, const char *passphrase) &#123; WiFi.mode(WIFI_STA); WiFi.begin(ssid, passphrase); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; Serial.println(&quot;Connected to AP&quot;); &#125; 请用刚才你保存好的3个数据，替换上面的定义，还有wifi的设置也请你自行替换 烧录过后，应该就能看到你的设备已经在线了 这时我们先暂时回到 生活物联网平台 中的 批量投产 页面 点开配网 + App下载二维码 把你的Device Name填好生成二维码 确定好你的Esp8266已经连接好阿里云后，在手机上搜索应用商店下载 云智能 APP 点开右上角的扫码功能，扫这个二维码 这是我配网成功的界面，我们现在打开Arduino IDE的串口功能，查看我们在App下达的指令 ESP8266 能否收到 欧耶！成功了！ 这时我们可以对代码进行进一步的修改 // 引入 wifi 模块，并实例化，不同的芯片这里的依赖可能不同 #include &lt;ESP8266WiFi.h&gt; static WiFiClient espClient; // 引入阿里云 IoT SDK #include &lt;AliyunIoTSDK.h&gt; #include&lt;SoftwareSerial.h&gt; SoftwareSerial mySerial(4,5); //D2，D1脚分别为rx，tx // 设置产品和设备的信息，从阿里云设备信息里查看 #define PRODUCT_KEY &quot;a1aOFU668aC&quot; //产品ID #define DEVICE_NAME &quot;FKRGB&quot; //设备名 #define DEVICE_SECRET &quot;***************&quot; //设备key #define REGION_ID &quot;cn-shanghai&quot; // 设置 wifi 信息 #define WIFI_SSID &quot;ESP8266&quot; #define WIFI_PASSWD &quot;IOT666666&quot; int Red,Blue,Green; String RGBvalue; void setup() &#123; // set the digital pin as output: mySerial.begin(9600); Serial.begin(115200); // 初始化 wifi wifiInit(WIFI_SSID, WIFI_PASSWD); // 初始化 iot，需传入 wifi 的 client，和设备产品信息 AliyunIoTSDK::begin(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID); // 绑定一个设备属性回调，当远程修改此属性，会触发 SetRGBColorCallback // RGBColor 是在设备产品中定义的功能标识符 AliyunIoTSDK::bindData(&quot;RGBColor&quot;,SetRGBColorCallback); &#125; void loop() &#123; AliyunIoTSDK::loop(); &#125; // 初始化 wifi 连接 void wifiInit(const char *ssid, const char *passphrase) &#123; WiFi.mode(WIFI_STA); WiFi.begin(ssid, passphrase); while (WiFi.status() != WL_CONNECTED) &#123; delay(1000); Serial.println(&quot;WiFi not Connect&quot;); &#125; Serial.println(&quot;Connected to AP&quot;); &#125; // RGBColor状态修改的回调函数 void SetRGBColorCallback(JsonVariant p) &#123; Red = p[&quot;RGBColor&quot;][&quot;Red&quot;]; Green = p[&quot;RGBColor&quot;][&quot;Green&quot;]; Blue = p[&quot;RGBColor&quot;][&quot;Blue&quot;]; RGBvalue += Red; RGBvalue += &#39;,&#39;; RGBvalue += Green; RGBvalue += &#39;,&#39;; RGBvalue += Blue; mySerial.print(RGBvalue); Serial.print(RGBvalue); RGBvalue = &quot;&quot;; &#125; 看注释就知道函数大概的用途，如果对上面函数有不了解的建议去看 AliyunIotSdk 的技术文档 然后我们回到 云智能App 来到这个页面点开 更多服务 找到天猫精灵，绑定你自己天猫精灵的账号 绑定成功后，打开天猫精灵看看 欧耶！连接上天猫精灵啦！ 用天猫精灵控制esp8266就很简单了，我们直接呢，在场景这个选项当中，新建一个自定义智能场景即可 然后你只需要对天猫精灵喊命令，就会按你的设置执行功能了 Arduino代码#include&lt;SoftwareSerial.h&gt; SoftwareSerial mySerial(2,3); //2，3脚分别为rx，tx #define Rpin 9 #define Gpin 10 #define Bpin 11 String ReadData; int RGBvalue[]=&#123;0,0,0&#125;; int tod; int i = 0; void setup() &#123; Serial.begin(115200); mySerial.begin(9600); pinMode(Rpin,OUTPUT); pinMode(Gpin,OUTPUT); pinMode(Bpin,OUTPUT); &#125; void loop() &#123; SerialListen(); goRGBwithArray(RGBvalue); i = 0; ReadData = &quot;&quot;; &#125; void SerialListen()&#123; while(mySerial.available()) &#123; ReadData += char(mySerial.read()); delay(2); &#125; Serial.print(ReadData); do&#123; tod = ReadData.indexOf(&#39;,&#39;);//找到字符串中逗号出现的位置 if(tod != -1) &#123; String str;//我们先创建一个String str = ReadData.substring(0,tod);//用来保存逗号前面的数据 RGBvalue[i] = str.toInt();//将上面的保存好的String数据转换成Int类型保存到RGBvalue中 ReadData = ReadData.substring(tod + 1,ReadData.length()); i++;//进入下一次循环 // Serial.println(message); &#125; else&#123; if(ReadData.length()&gt;0)&#123; RGBvalue[2] = ReadData.toInt(); &#125; &#125; &#125;while(tod&gt;=0); &#125; void goRGB(int Rval,int Gval,int Bval)&#123; analogWrite(Rpin,Rval); analogWrite(Gpin,Gval);//因为我手头这个RGB灯带是共阴的，所以不需要用255去减，如果是共阴的RGB灯带要用255减去这个值 analogWrite(Bpin,Bval); &#125; void goRGBwithArray(int RGBval[])&#123; analogWrite(Rpin,RGBval[0]); analogWrite(Gpin,RGBval[1]); analogWrite(Bpin,RGBval[2]); &#125; void bln(int pin,int val)&#123; //简单呼吸灯函数 for(int i=0;i&lt;val ; i++)&#123; analogWrite(pin,i); delay(2); &#125; delay(1000); for(int i=255;i&gt;0 ; i--)&#123; analogWrite(pin,i); delay(2); &#125; &#125; 这里的代码可以不用照抄，大家可以按自己需求写自己的下位机代码，我这里主要是提供一个思路 总结比较容易上手的实用小项目，适合喜欢动手的小伙伴来体验物联网这一概念！ 最后,Excelsior!","path":"2021/09/14/简单配置使用天猫精灵控制你的ESP8266/","date":"09-14","excerpt":"","tags":[{"name":"物联网","slug":"物联网","permalink":"http://liangzt.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"}]},{"title":"Hexo + Coding/Github静态博客部署教程 2021版","text":"Hexo + Coding/Github 静态博客部署教程本篇文章内容由本人实践后亲测有效，遇到奇奇怪怪的BUG建议熟练使用百度等搜索引擎，如若无果在尝试联系本人=v= var ap = new APlayer({ element: document.getElementById(\"aplayer-jZkqOfws\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"sweets parade\", author: \"花澤香菜\", url: \"http://music.163.com/song/media/outer/url?id=809268.mp3\", pic: \"https://p1.music.126.net/soVzasgTYU36F1uAirKEhQ==/109951165628137310.jpg?\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 文章共分成4大块构成 前言 前期准备工作 网页配置 个性化域名设置 前言​ 这个博客之前是直接托管给Github pages进行架设的，Github的速度大家都懂的，没有撑杆简直可以说是龟速，而我又给这个博客放置了太多二次元图片，导致本就不快的网页加载的更加慢了QAQ (PS:原先打算是使用Gitee pages托管，但是不知道为什么现在Gitee pages暂停了服务) 经过检索，决定使用Coding的静态网页托管服务，Coding的节点在中国香港，比起Github的荷兰节点肯定是快上不少。于是折腾了一个上午，把博客的架设全面迁移到了Coding上。 Github和Coding的构建方式其实大同小异，不过要留意的是，Coding虽然是免费的,但他所使用的CDN加速服务是腾讯云的，这一点很蛋疼，我才刚构建不到2个小时给我扣了0.04元(钱虽然少，但积少成多就不可忽视了)而Github的服务则就是完全免费开源的了，大家按需选择 前期准备工作 安装Git 安装Node.js 注册Coding/Github账号 获取ssh公钥 安装Hexo 查阅Hexo官方文档进行1-2步的配置 文档 | Hexo 如何获取ssh公钥对着文件夹空白处右键，选择 Git Bash Here 打开git界面 紧接着，先配置用户名,然后在配置自己的邮箱 (PS:如果你想要双线部署的话Coding和Github的邮箱以及用户名都设置一样会方便很多，但是密钥是可以多个生成的，按需选择吧~) git config --global user.name \"xxx\"(注册网站的用户名) git config --global user.email \"xxx@xx.com\"(注册网站的邮箱,别忘记了双引号哦) 然后继续，在git界面键入 ssh-keygen -t rsa -C xxx@xx.com 过后他会弹出几个询问是否设置密码的提示，为了避免麻烦，建议不用设置，直接回车。 这样就算建立成功了 你可以在刚才的文件夹中发现两个新的文件 然后打开到你刚注册好的网站的页面(英文的那个是Github,中文的是Coding) 找到SSH公钥设置&gt;新增公钥 右键，用笔记本来打开id_rsa.pub文件，并且将里面的内容从头到脚复制一遍，黏贴到网页中的公钥内容中，标题随便设置，Coding记得勾选永久有效，然后点击确定 完成后回到 git界面，输入 ssh -T git@github.com 或者 ssh -T git@coding.net 来测试SSH连接 询问是否连接，输入yes 重新键入测试 如图，即为正确连接 安装Hexo右键电脑桌面计算机&gt;属性&gt;高级系统属性&gt;环境变量 选中Path，打开编辑 将node.js、npm、git都加入进环境变量中 （PS:如果不清楚怎么找到它们的地址，请活用百度等搜索引擎上网查询） 依旧是打开我们熟悉的git cnpm install -g hexo-cli 或者 yarn add -g hexo-cli 出现报错的情况，请查看我上一篇文章《关于Gal主题的一些使用心得》有写Cnpm和Yarn的下载方式 安装结束后，找到一个合适的文件夹，用作你的博客根目录 在空白处右击鼠标，打开Git界面 键入 hexo init 我的根目录就是在一个名为blog的文件夹中 完毕后直接 hexo g (或者输入hexo generate) hexo s (或者输入hexo server) 出现如图指令即为成功建立本地端网站，你可以打开 http://localhost:4000 来浏览它 网页配置Github首先我们要新建一个仓库，仓库名必须是你的 用户名.github.io 格式如图 我这里报错是因为已经建立过了 Coding这边一样，不过只需要仓库名称是用户名就好了，两个网站都一样勾选生成README文件 其中Coding要记得勾选公开仓库，要不然别人是进不了你的网页的 创建仓库完毕后，将你仓库的ssh链接Clone一下 然后打开博客根目录的_config.yml文件，直接拉到最下面 如图修改 deploy: type: git repo: 这里复制黏贴上你刚才Clone下来的链接 branch: main 这里的main还是master取决于你仓库的根目录叫什么，一般来说Github的是main而Coding的就是master 注意一下冒号后面有一个空格，请别忘记输入 修改完后我们还可以根据Hexo官网的配置手册进行对照配置_config.yml文件 如图，这是我自己的配置 准备完成后，对着你的根目录，也就是_config.yml所在的文件夹右键打开git 依次输入 hexo clean hexo g hexo d **（注意：每次修改根目录的文件后都需要重新进行以上3个步骤(比如发布文章之类的) ** ##Coding除了要重新上传到库之后还要手动到网页托管界面重新部署，这一点也比较麻烦） 一般的，如果你运行完以上代码后，出现和我差不多一样的界面，恭喜你，你成功的架设了属于自己的博客(此处仅限Github用户)可以通过 xxxx（你的用户名）.github.io 进入你的博客查看 Coding用户不要着急，你们还有几个步骤呢 让我们回到浏览器，找到网页托管选项 这里建议跟着官方的流程走一遍，因为这一块我以前用腾讯云的时候已经注册过一次了 网站托管服务 - CODING 帮助中心 成功进入配置后，按照我的格式来进行网页配置 注意这里网站类型要选择静态网站，选择Hexo会报错 然后确定后开始创建即可，网站建立完成后，右上角可以选择进入访问，上面的链接你可以直接复制黏贴出去。 个性化域名设置首先你需要拥有一个自己的域名，这里我只推荐通过阿里云万网购买，因为我只在这里试过，如果你自己有其他更好的选择，按需即可 关于域名购买的方法，网上有很多全面的教程，这里就不细说了 回到博客根目录下\\source，新建一个CNAME文件(无后缀注意)使用笔记本打开他，在里面输入你自己的域名，比如我就输入 liangzt.top ，前面不用加任何的东西。然后保存即可 然后重新 clean g s老三样一下 这个时候，进入你的阿里云域名管理系统，点击解析 添加记录 照着我这个格式设置就好了，记录值就是你刚才拿到的(xxx.github.io)，一个主机记录是www的一个是@的 如果你的主机记录选择 www ，就可以通过 www.liangzt.top 进行网站访问了，如果只想输入 liangzt.top 来访问网站，那只需要选择@做主机记录即可，我这里两个都进行了设置。Coding用户，直接在网页托管界面有一个自定义域名，把自己域名填进去就可以了，记得把强制https给勾选上。 Github用户开启强制https的方法 打开仓库设置，找到pages，将最下面的选项给勾选上（一般来说颁发SSL大概要24小时，所以这个时间段应该还勾选不了，明天记得勾选就好了） 总结因为这个教程大多数是靠我自己看别人的教程琢磨出来的，可能有些地方讲的不太清楚请多见谅，可以去搜索别的Hexo建站教程补充一下，我写这个 一是为了记录下自己建站的一个经历，二就是因为实在没想好要更新什么文章，索性直接把自己这3天的踩过的一些坑排除掉写一份相对比较简单易懂的建站教学，从头到尾甚至不需要你懂代码就可以完成。 希望这个教程能够帮助有需要的人，也希望自己能保持更新博客的好习惯，时刻分析自己所做的以及应该去做的事情，明确目标。 最后,Excelsior! 宫子真可爱嘻嘻","path":"2021/07/30/Hexo-Coding-Github静态博客部署教程-2021版/","date":"07-30","excerpt":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://liangzt.top/tags/Hexo/"},{"name":"博客技术","slug":"博客技术","permalink":"http://liangzt.top/tags/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"}]},{"title":"关于Gal主题的一些使用心得","text":"var ap = new APlayer({ element: document.getElementById(\"aplayer-ytQvlwqT\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"メビウス!\", author: \"佐橋俊彦\", url: \"http://music.163.com/song/media/outer/url?id=408772686.mp3\", pic: \"https://p1.music.126.net/eLR9mBbd2W55p3Utz6oinQ==/1401877329221968.jpg?\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); PS：开始前不来点音乐吗XD 针对Hexo Theme Gal 在git以下内容时报错的解决方案 npm install hexo-renderer-sass --save npm install hexo-renderer-scss --save 1.下载Yarn2 - 安装 | Yarn - JavaScript 软件包管理器 | Yarn 中文文档 - Yarn 中文网 (yarnpkg.cn) 按照文档描述下载安装好后可以重新安装 yarn add hexo-renderer-sass yarn add hexo-renderer-scss 2.改用淘宝镜像 cnpm下载npm install -g cnpm --registry=https://registry.npm.taobao.org npm config set registry https://registry.npm.taobao.org cnpm install hexo-renderer-sass --save 如果在git拉取时报错OpenSSL SSL_read: Connection was reset, errno 10054将ssl验证关闭即可，然后重新拉取 git config --global http.sslVerify \"false Gal 主题色更改方式在你的Hexo博客根目录下\\themes\\gal\\source\\css中找到_variables.scss文件 颜色对应关系的话其实直接对比页面与scss文件里面RGB代码就能看出来，建议开着F12对照。 代码高亮设置Gal主题里面引用了highlight.js 最简单的应用方式就好像我上面的示例 直接按如下格式输入即可 代码内容 如下 import random yLTT = &quot;BEzier&quot; print(yLTT) random_num = random.randint(1,1000) for i in range(3): num = int(input(&#39;请输入你猜的数字：&#39;)) if num&gt;random_num: print(&#39;你猜的太大了&#39;) elif num&lt;random_num: print(&#39;太小了&#39;) else: print(&#39;恭喜你猜对了，答案是：&#39;,random_num) break 我个人觉得Md文件编辑用 Typora 会方便一点，代码块高亮可以直接导入不用按格式输入 加载图片避坑这里可以直接照着这位大佬的方法走就可以了: HEXO插入图片（详细版） - 简书 (jianshu.com) 一般的，按照上面的流程走完后可以直接通过 ![图片名](图片.jpg) 在文章中进行一个图片的展示 这里的文章就是指你_post文件夹下的文件，也就是你在git中通过 hexo new xxx 新建的文件，但如果你拿这个方法在页面中使用，就没效果了 hexo new page xxx 新建页面 如果你想要在页面（比如“关于我” about页面）中添加图片，直接使用Html的语法就可以了~(当然文章也可以使用这个方法) &ltimg src=\"/image/xxx.png\" /&gt 这里我是直接在我的Hexo根目录的\\source文件夹下面新建了一个image文件夹,然后把需要展示的图片放进去，调用起来也很方便。 自己的碎碎念开博客是为了更好的记录自己学习的历程，目前网站是直接托管给Github page服务的，或许未来有钱了架设一个服务器也是不错的选择~(º﹃º ) 话说原来暑假已经过去一个月了吗？？？！","path":"2021/07/29/关于Gal主题的一些使用心得-0/","date":"07-29","excerpt":"","tags":[{"name":"web","slug":"web","permalink":"http://liangzt.top/tags/web/"},{"name":"博客相关","slug":"博客相关","permalink":"http://liangzt.top/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}]}],"categories":[],"tags":[{"name":"物联网","slug":"物联网","permalink":"http://liangzt.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"},{"name":"洋货","slug":"洋货","permalink":"http://liangzt.top/tags/%E6%B4%8B%E8%B4%A7/"},{"name":"web","slug":"web","permalink":"http://liangzt.top/tags/web/"},{"name":"博客相关","slug":"博客相关","permalink":"http://liangzt.top/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"},{"name":"Hexo","slug":"Hexo","permalink":"http://liangzt.top/tags/Hexo/"},{"name":"博客技术","slug":"博客技术","permalink":"http://liangzt.top/tags/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"}]}